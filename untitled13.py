# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NdIGiJUSjE842PTt4p5t3d_z_SP7sK0D
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense,
Dropout, BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# Define dataset paths
train_data_dir = 'D:/HaGRID-Dataset/Train'
test_data_dir = 'D:/HaGRID-Dataset/Test'

# Image dimensions and other parameters
img_width, img_height = 256, 256
batch_size = 32
epochs = 20
num_classes = 19

# Create an ImageDataGenerator for data augmentation
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255.0,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

test_datagen = ImageDataGenerator(rescale=1.0 / 255.0)

# Load and preprocess training data
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical'
)

# Load and preprocess test data
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical'
)

# Build a CNN model
model = Sequential()

# Convolutional Block 1
model.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3),
activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Convolutional Block 2
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Convolutional Block 3
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Convolutional Block 4
model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Additional Convolutional Block 5
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Additional Convolutional Block 6
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Additional Convolutional Block 7
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Additional Convolutional Block 8
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten Layer
model.add(Flatten())

# Fully Connected Block 1
model.add(Dense(1024, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# Fully Connected Block 2
model.add(Dense(512, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# Output Layer
model.add(Dense(num_classes, activation='softmax'))

# Compile the model
optimizer = Adam(learning_rate=0.0001)
model.compile(optimizer=optimizer, loss='categorical_crossentropy',
metrics=['accuracy'])

# Implement early stopping
early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss',
patience=6, restore_best_weights=True)

# Train the model
model.fit(train_generator, epochs=epochs, validation_data=test_generator,
callbacks=[early_stopping])

# Evaluate the model
score = model.evaluate(test_generator)
print(f"Test loss: {score[0]}, Test accuracy: {score[1]}")

# Save the trained model to a file
model.save(â€˜D:\jupyter notebook\cnn_trained_model')

import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import pyttsx3
import threading
import tkinter as tk

# Load the trained model
model = load_model(r'D:\jupyter notebook\cnn_trained_model')

# Define class labels
class_labels = ['call', 'dislike', 'fist', 'four', 'like', 'mute',
'no_gesture', 'ok', 'one', 'palm',
                'peace', 'peace_inverted', 'rock', 'stop',
'stop_inverted', 'three', 'three2', 'two_up', 'two_up_inverted']

# Initialize the text-to-speech engine
engine = pyttsx3.init()

# Function to speak the predicted class label
def speak_label(label):
    engine.say(label)
    engine.runAndWait()

# Function to start the real-time prediction
def start_prediction():
    # Create a VideoCapture object
    cap = cv2.VideoCapture(0)  # 0 corresponds to the default camera, you
can change it to a different index if you have multiple cameras

    while True:
        # Capture frame-by-frame
        ret, frame = cap.read()

        # Preprocess the frame for the model
        img = cv2.resize(frame, (224, 224))
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array /= 255.0

        # Make a prediction
        predictions = model.predict(img_array)

        # Get the predicted class label
        predicted_class_index = np.argmax(predictions)
        predicted_class_label = class_labels[predicted_class_index]

        # Display the frame with the predicted class label
        cv2.putText(frame, f"Predicted class: {predicted_class_label}",
(50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow('Real-Time Prediction', frame)

        # Use multithreading to speak the predicted class label
        threading.Thread(target=speak_label,
args=(predicted_class_label,)).start()

        # Break the loop if 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the VideoCapture and close all windows
    cap.release()
    cv2.destroyAllWindows()

# Create a Tkinter window
window = tk.Tk()
window.title("Real-Time Gesture Recognition Dashboard")
window.geometry("800x600")  # Set window size

# Add a title label
title_label = tk.Label(window, text="Real-Time Gesture Recognition
Dashboard", font=("Arial", 24), pady=20)
title_label.pack()

# Add a live video feed
video_feed_label = tk.Label(window, text="Live Video Feed",
font=("Arial", 20), pady=10)
video_feed_label.pack()

# Add a button to start prediction
start_button = tk.Button(window, text="Start Prediction",
command=start_prediction, font=("Arial", 16))
start_button.pack(pady=20)

# Add a button to quit
quit_button = tk.Button(window, text="Quit", command=window.quit,
font=("Arial", 16))
quit_button.pack()

# Run the Tkinter event loop
window.mainloop()